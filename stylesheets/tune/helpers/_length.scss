// ============================================================================
// Tune-css Length Helpers
// ============================================================================

@import "aleksi/lengths/convert";
@import "tune/defaults/lengths";
@import "tune/settings";

// Inject Tune defaults
$tune-units: map-merge($_tune-unit-defaults, $tune-units);

/// tune-length($val, $unit[, $args... ])
/// ---------------------------------------------------------------------------
/// Converts a length value in the given unit, using the conversion functions
/// defined by the developer.

@function tune-length($val, $unit, $args...)
{
  // accept 'null', in which case no length conversion will be made
  @if $val == null {
    @return null;
  }

  // use developer defined function to convert length
  $fn:_tune-unit-fn($unit);
  // $args: prepend($args, $val);
  @return call($fn, $val, $args...);
}

/// tune-length($val, $unit[, $args... ])
/// ---------------------------------------------------------------------------
/// Includes the given css property with a length value, converted into the
/// given unit using the conversion functions defined by the developer.

@mixin tune-length($property, $val, $unit, $args...)
{
  // include 'rem' fallbacks for IE8 and smaller
  @if $unit == 'rem' and tune-supports('ie' 8) {
    #{$property}: tune-length($val, 'px', $args...);
  }

  #{$property}: tune-length($val, $unit, $args...);
}

/// _tune-unit-fn($val, $unit[, $args... ])
/// ---------------------------------------------------------------------------
/// Returns the unit conversion function, as defined by developer

// Defaults injected by Tune-css


@function _tune-unit-fn($unit)
{
  // check if developer defined a unit conversion function
  $fn: map-get($tune-units, $unit);

  // warn if function was not found or does not exist
  @if not $fn or not function-exists($fn) {
    @warn "_tune-unit-fn(): unknown conversion function for unit `#{$unit}`."
  }

  @if $fn {
    @return $fn
  }

  @return null;
}