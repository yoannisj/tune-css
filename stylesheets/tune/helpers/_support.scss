// ============================================================================
// Tune-css Browser-Support Helpers
// ============================================================================

@import "support-for";
@import 'tune/settings';

$support-for: map-merge((
  'chrome':  -4,
  'edge':    -4,
  'firefox': -4,
  'ie':      9,
  'opera':   -4,
  'safari':  -4,
  'and_chr': -4,
  'ie_mob':  -4,
  'ios_saf': -4,
  'op_mob':  null,
  'op_mini': -4,
  "android": -4,
  'samsung': -4,
), $support-for);

// Set the current version number for all browsers. As of: 2016-04-30
$support-for-current-browser-version: map-merge((
  'chrome':  50,
  'edge':    25,
  'firefox': 46,
  'ie':      11,
  'opera':   36,
  'safari':  9,
  'and_chr': 51,
  'ie_mob':  11,
  'ios_saf': 10,
  'op_mob':  37,
  'op_mini': null,
  "android": 4,
  'samsung': 4,
), $support-for-current-browser-version);

/// tune-supports()
/// ---------------------------------------------------------------------------
/// Checks whether the given browser(s) are supported. Accepts a map of browser
/// names and version ('*' for any version). Accepts one or more browser
/// definitions (name and optionally version).

@function tune-supports($browsers...)
{
  // check for all browsers passed
  @each $b in $browsers
  {
    // allow passing a map of browser versions
    @if type-of($b) == 'map' {
      $browsers: _tune-browsers-list($b);
      @return support-browser($browsers...);
    }

    // allow passing a browser name with a specific version
    @if length($b) == 2 {
      $browser: nth($b, 1);
      $ver: nth($b, 2);
      @return support-for($browser, $ver);
    }

    // allow passing the name of a browser if version is irrelevant
    @else if map-has-key($support-for, $b) and map-get($support-for, $b) {
      @return true; 
    }
  }

  // return 'false' if no given browser is supported
  @return false;
}

/// _tune-browsers-list($browsers)
/// ---------------------------------------------------------------------------
/// Converts a map of browser names and version ('*' for any version) into a
/// list of browser definitions (name and optionally version).

@function _tune-browsers-list($browsers)
{
  $res: ();

  @each $name, $ver in $browsers {
    $def: if($ver == '*', $name, ($name, $ver));
    $res: append($res, $def);
  }

  @return $res;
}